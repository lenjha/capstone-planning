1. Break UI into Component Hierarchy
  Home
  Inventory
  Items
  Crafting

2. Build static version in React

3. Identify Minimal yet complete representation of UI State

4. Identify where state should live

5. Add inverse data flow


BEEN GETTING THIS ERROR ON BETTY:
Uncaught TypeError: Cannot read property 'scopeDescriptorForBufferPosition' of undefined
  only in .jsx files when hitting return or tab



SOME RESOURCES:
shareicon.net - for icons

FUTURE NOTES:
User image and name (and currency?) on header (upper-right corner?)
React transitions and animations
  https://www.learnhowtoprogram.com/react/advanced-topics/ui-animations-and-interactivity





function addNewCreature(event){
  const { dispatch } = props;
  event.preventDefault();
  const action = {
    type: 'ADD_CREATURE'
  };
  props.onAddNewCreature({});
};




create single source of truth - createStore
- reducers
  update/mutate state in store
- actions
    describes that something happened,
    says that the state should change in response

dispatch by store, handled by reducer, reducer tells actions to go - data in action is 'payload'

getState() - returns store's current state
dispatch() - sends actions to change state
subscribe() - register callback invoked when store's state is updated

connect() - takes component as argument, returns with added functionality
  adds dispatch(), support to refine mapStateToProps()
dispatch() - lets components dispatch Redux actions within their own code
mapStateToProps() - matches state items from Redux store to their corresponding React props


make redux store
  use createStore() method
configure react-redux provider
  config React-Redux <Provider> parent component to provide React components access to connect()
    add in place of <AppContainer>, inside of <HashRouter>
    pass Redux store to <Provider> as a prop
      <Provider store={store}>
connect components to Store
  determine which components need store access and connect them
      higher order components take existing comp, returns second
dispatch actions to mutate store state
  dispatch, make action, add action payload, incorporate reducer code



JEST - testing
  test('two plus two is four', () => {
    expect(2+2).toBe(4);
  });
